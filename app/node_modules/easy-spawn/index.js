var configurable = require('config-obj');
var util = require('util');
var spawn = require('child_process').spawn;

function checkSuccess (outputData, code, errorData) {
    return code === 0 && errorData === '';
}

var Spawn = function(options) {
    var defaultOptions = {
        program: null,
        cwd: null,
        silent: false
    };

    this.option(options);
    
};


Spawn.joinParams =function() {
    var result = [];
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined && arguments[i] !== null) {
            if (util.isArray(arguments[i])) {
                result = result.concat(arguments[i]);
            }
            else {
                result.push(arguments[i]);
            }
        }
    }

    return result;
}

Spawn.prototype = {
    cmd: function(options, callback) {
       
        var outputData=[];
        var errorData =[];
       
        program=options.program;
        command=options.command;
        filepath=options.path;
        
        if(command==""){

            s = spawn(program,[filepath]);

        }else{

            s = spawn(program,[command,filepath]);
        }

        s.on('error', function(err) {
            callback && callback(err);
        });

        // Do not use "exit" event here, because "Note that the child process stdio streams might still be open."
        s.on('close', function(code, signal) {
            
            var outputDataString = outputData.join('');
            var errorDataString = errorData.join('');

            // success
            if (checkSuccess(outputDataString, code, errorDataString)) {
                
                callback && callback(null, outputDataString);
            }
            else {
                var e = new Error(errorData);
                e.code = code;
                e.output = errorDataString;
                callback && callback(e);
            }
        });

        s.stdout.on('data', function(data) {

            outputData.push(data);
        });

        s.stderr.on('data', function(data) {
           
            errorData.push(data);
        });

        return this;
    }
};

configurable(Spawn);

module.exports = Spawn;